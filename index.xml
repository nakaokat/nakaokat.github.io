<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>My Notes</title>
    <link>http://nakaokat.github.io/</link>
    <description>Recent content on My Notes</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <lastBuildDate>Wed, 21 Oct 2015 17:31:09 +0900</lastBuildDate>
    <atom:link href="http://nakaokat.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>CSSでvisibilityプロパティを使う</title>
      <link>http://nakaokat.github.io/post/css_visibility/</link>
      <pubDate>Wed, 21 Oct 2015 17:31:09 +0900</pubDate>
      
      <guid>http://nakaokat.github.io/post/css_visibility/</guid>
      <description>

&lt;p&gt;CSSで要素を表示させたくない場合、&lt;code&gt;display:none&lt;/code&gt;だとDOMから要素自体を削除してしまう。&lt;/p&gt;

&lt;p&gt;visibilityを使用すれば、要素自体は削除せずに要素を非表示にすることができる。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-CSS&#34;&gt;.invisible{
    visibility: hidden;
    opacity: 0;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;transitionプロパティを使用してアニメーションで表示することも、visibilityプロパティを使うことで可能になる。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-CSS&#34;&gt;.target{
    transition: all .4s;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;参考:06b802778c2ceb6864905ce1de17aa9f&#34;&gt;参考&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://developer.mozilla.org/ja/docs/Web/CSS/visibility&#34;&gt;visibility - CSS | MDN&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>コンストラクタ(Javascript)とは</title>
      <link>http://nakaokat.github.io/post/constructor_javascript/</link>
      <pubDate>Fri, 16 Oct 2015 12:40:16 +0900</pubDate>
      
      <guid>http://nakaokat.github.io/post/constructor_javascript/</guid>
      <description>&lt;p&gt;JavaScriptにおけるコンストラクタ Constructor とは、new 演算子をつけて呼び出すことを前提としてつくられた関数。&lt;/p&gt;

&lt;p&gt;JavaScriptでは関数に new 演算子をつけて呼び出すと、新しいオブジェクトがつくられる。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;コンストラクタは大文字で始まる名前の変数に格納されるのが慣例である。コンストラクタをnew演算子を使わずに呼び出した場合、良くない事態が発生する可能性があるにもかかわらず、コンパイル時にも実行時にも何も警告もでない。&lt;/p&gt;

&lt;p&gt;JavaScript Good Parts p.35&lt;/p&gt;
&lt;/blockquote&gt;
</description>
    </item>
    
    <item>
      <title>JavaScriptのthisキーワードとは</title>
      <link>http://nakaokat.github.io/post/this_javascript/</link>
      <pubDate>Tue, 13 Oct 2015 23:15:19 +0900</pubDate>
      
      <guid>http://nakaokat.github.io/post/this_javascript/</guid>
      <description>&lt;p&gt;thisとは関数に暗黙に渡されるパラメーターで、その関数をもつオブジェクトを指す。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-JavaScript&#34;&gt;var alice = {
    name: &amp;quot;Alice&amp;quot;,
    getName: function(){
        return this.name;
    }
}

console.log(alice.getName());
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;簡単にいうと、メソッドのドットの左側にあるオブジェクト。なので関数を呼び出すオブジェクトが異なれば、thisも変わる。&lt;/p&gt;

&lt;p&gt;以下、MDNの説明。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;this キーワードはコンテキストオブジェクト (カレントオブジェクト) を参照します。一般的に、メソッド内では this は呼び出し元オブジェクト (calling object)を参照します。&lt;/p&gt;

&lt;p&gt;thisを使うと現在のコンテキストオブジェクトへの参照を得ることができ、その実行コンテキストのプロパティやメソッドを this を通して (this.member のようにして) 参照できます。コンテキストオブジェクトは関数に渡される「隠しパラメータ」とみなす事が出来ます。this が渡されるのには 3 通りの方法があります。&lt;/p&gt;

&lt;p&gt;this - JavaScript | MDN(&lt;a href=&#34;https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Operators/this&#34;&gt;https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Operators/this&lt;/a&gt;)&lt;/p&gt;
&lt;/blockquote&gt;
</description>
    </item>
    
    <item>
      <title>Homebrewを使う</title>
      <link>http://nakaokat.github.io/post/homebrew/</link>
      <pubDate>Wed, 30 Sep 2015 01:00:31 +0900</pubDate>
      
      <guid>http://nakaokat.github.io/post/homebrew/</guid>
      <description>

&lt;h3 id=&#34;homebrewとは:399f29744c891ad533f638b5c82362f6&#34;&gt;Homebrewとは&lt;/h3&gt;

&lt;p&gt;Mac OSX用のパーケージ管理システムである。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://brew.sh/&#34;&gt;http://brew.sh/&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;よく使うコマンド:399f29744c891ad533f638b5c82362f6&#34;&gt;よく使うコマンド&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;brew doctor&lt;/code&gt;：brew が正常に使えるかをチェックする。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;brew install {package-name}&lt;/code&gt;：パッケージをインストールする。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;brew outdated&lt;/code&gt;：新しいバージョンのあるパッケージをリストアップする。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;brew update&lt;/code&gt;：HomebrewのFormula List をアップデートする。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;brew upgrade {package-name}&lt;/code&gt;：{package-name}を新しいバージョンにアップグレードする。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;brew upgrade&lt;/code&gt;：更新のあるパッケージをすべてアップグレードする。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Gitとは:分散型バージョン管理システム</title>
      <link>http://nakaokat.github.io/post/git/</link>
      <pubDate>Thu, 09 Jul 2015 02:12:16 +0900</pubDate>
      
      <guid>http://nakaokat.github.io/post/git/</guid>
      <description>

&lt;h3 id=&#34;gitとは:1c1ef82aae62aeea8eedcb5f455b129b&#34;&gt;Gitとは&lt;/h3&gt;

&lt;p&gt;Git( &lt;a href=&#34;https://git-scm.com/&#34;&gt;https://git-scm.com/&lt;/a&gt; )とはプログラムのソースコードなどの変更履歴を管理するバージョン管理システムとよばれるソフトウェアのひとつです。バージョン管理システムとは、機能の追加やバグの修正などの変更ごとに履歴を記録し、管理するシステムのことです。&lt;/p&gt;

&lt;h3 id=&#34;gitの特徴:1c1ef82aae62aeea8eedcb5f455b129b&#34;&gt;Gitの特徴&lt;/h3&gt;

&lt;p&gt;Gitはオープンソースであり無料です。Gitは分散型のバージョン管理システムです。分散型とは、ソースコードを唯一の場所（リポジトリ※）に保管し、管理する方法です。一方でGitなどの分散型バージョン管理システムでは複数のリポジトリが存在します。&lt;/p&gt;

&lt;p&gt;※ リポジトリ repository とはソースコードの保管されてる場所、ディレクトリのことを指します。&lt;/p&gt;

&lt;p&gt;Gitが使用されている最も有名な例はLinuxでしょう。GitはLinuxの開発のために2005年につくられました。Gitの詳しい歴史は Wikipediaなどを参照してください。&lt;/p&gt;

&lt;p&gt;git - Wikipedia
&lt;a href=&#34;https://ja.wikipedia.org/wiki/Git&#34;&gt;https://ja.wikipedia.org/wiki/Git&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;githubとは:1c1ef82aae62aeea8eedcb5f455b129b&#34;&gt;Githubとは&lt;/h3&gt;

&lt;p&gt;Github( &lt;a href=&#34;https://github.com/&#34;&gt;https://github.com/&lt;/a&gt; )とは、GitのリポジトリをホスティングするWebサービスです。Githubの運営はGithub社によって運営されています。Githubの運営と Git の開発には直接的な関係はありません。つまりGitとはシステム、ソフトウェアのことを指し、Githubとはそのシステムを利用するサービスのひとつということです。&lt;/p&gt;

&lt;p&gt;Gitの人気や知名度の高さには、Githubの人気も大きな貢献をしていると思います。ですのでGitの紹介の記事ですが、Githubについての項目を設けました。&lt;/p&gt;

&lt;h3 id=&#34;gitの使いかた:1c1ef82aae62aeea8eedcb5f455b129b&#34;&gt;Gitの使いかた&lt;/h3&gt;

&lt;p&gt;Gitはコマンドラインで操作しますが、GUIのクライアントアプリもあります。GUIのクライアントとしては、Github社のGithub（アプリ、無料）や、Atlassian社のSourceTree（アプリ無料）などが有名です。&lt;/p&gt;

&lt;p&gt;コマンドラインで操作するにしても、GUIのクライアントアプリを使用するにしても、Gitを構成するいくつかの概念について学ぶ必要があります。リポジトリ、コミット、プッシュ、クローンなどの見なれない言葉がたくさんでてきます。&lt;/p&gt;

&lt;p&gt;オンラインにはGitを学ぶためのたくさんのリソースが公開されています。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.codeschool.com/courses/try-git&#34;&gt;Try Git - Code School&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.atlassian.com/ja/git/tutorial/git-basics&#34;&gt;Git の基本 | アトラシアン Git チュートリアル&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.udacity.com/course/how-to-use-git-and-github--ud775&#34;&gt;How to Use Version Control in Git &amp;amp; GitHub - Udacity&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Hugo(静的Webサイトエンジン)とは</title>
      <link>http://nakaokat.github.io/post/hugo/</link>
      <pubDate>Sat, 04 Jul 2015 19:03:02 +0900</pubDate>
      
      <guid>http://nakaokat.github.io/post/hugo/</guid>
      <description>

&lt;h3 id=&#34;1-hogo-とは:32ab7241d48fcc174c877413a917f8cf&#34;&gt;1. Hogo とは&lt;/h3&gt;

&lt;p&gt;Hugoとは静的サイトをシンプルにつくることのできるツールです。生成されるwebサイトは、WordpressやTumblrなどでつくったブログにも見えます。しかしWordpresssなどと異なり、コンテンツの作成はすべてローカルで行います。&lt;/p&gt;

&lt;p&gt;公式サイト &lt;a href=&#34;http://gohugo.io/&#34;&gt;http://gohugo.io/&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;2-hogo-の特徴とメリット:32ab7241d48fcc174c877413a917f8cf&#34;&gt;2. Hogo の特徴とメリット&lt;/h3&gt;

&lt;p&gt;HugoはGo言語でつくられています。Go言語はコンパイラ言語なので、インタラプタ言語のPythonでつくられたPelicanや、RubyでつくられたJekyll, Octpress よりも高速に動作するのが特徴です。&lt;/p&gt;

&lt;h3 id=&#34;3-hugo-の導入と使いかた:32ab7241d48fcc174c877413a917f8cf&#34;&gt;3. Hugo の導入と使いかた&lt;/h3&gt;

&lt;p&gt;Hogoはコマンドラインで使います。コマンドラインの基本的な操作ができる必要があります。Hogoの使用にはGo言語の知識は必要ありません。&lt;/p&gt;

&lt;p&gt;具体的なHugoのつかいかたは公式ドキュメント( &lt;a href=&#34;http://gohugo.io/overview/introduction/&#34;&gt;http://gohugo.io/overview/introduction/&lt;/a&gt; )を参照してください。&lt;/p&gt;

&lt;p&gt;Hugoつくった静的サイトをWebで公開するにはFTPなどでサーバーにアップロードするだけです。Github Pages とあわせて使うと、簡単に無料で自分のWebサイトを公開することができます。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>virutualenv で Pythonの仮想環境をつくる</title>
      <link>http://nakaokat.github.io/post/virtualenv_python/</link>
      <pubDate>Wed, 01 Jul 2015 15:12:13 +0900</pubDate>
      
      <guid>http://nakaokat.github.io/post/virtualenv_python/</guid>
      <description>

&lt;h3 id=&#34;1-virutualenv-をインストールする:12153cb64234be34aeefae32243b0009&#34;&gt;1. virutualenv をインストールする&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;pip install virtualenv&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&#34;2-仮想環境を作る:12153cb64234be34aeefae32243b0009&#34;&gt;2. 仮想環境を作る&lt;/h3&gt;

&lt;p&gt;省略。&lt;/p&gt;

&lt;p&gt;Pycharmで作れるので、Pycharmをつかった。&lt;/p&gt;

&lt;h3 id=&#34;3-仮想環境を実行する:12153cb64234be34aeefae32243b0009&#34;&gt;3. 仮想環境を実行する&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;source {venv-name}/bin/activate&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;source&lt;/code&gt;コマンド: ファイルのソースを実行する&lt;/p&gt;

&lt;h3 id=&#34;4-仮想環境から抜ける:12153cb64234be34aeefae32243b0009&#34;&gt;4. 仮想環境から抜ける&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;deactivate&lt;/code&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>FlaskをHerokuで動かす</title>
      <link>http://nakaokat.github.io/post/flask_heroku/</link>
      <pubDate>Wed, 01 Jul 2015 14:44:56 +0900</pubDate>
      
      <guid>http://nakaokat.github.io/post/flask_heroku/</guid>
      <description>

&lt;h3 id=&#34;1-flask-を-herokuで動かす:cb0cc48d0a7f78f425de2c2eae671543&#34;&gt;1. Flask を Herokuで動かす&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Flask: Pythonの軽量フレームワーク&lt;/li&gt;
&lt;li&gt;Heroku: Paas&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;2-introduction-事前準備:cb0cc48d0a7f78f425de2c2eae671543&#34;&gt;2. Introduction 事前準備&lt;/h3&gt;

&lt;p&gt;Heokuのアカウントをつくる&lt;/p&gt;

&lt;p&gt;virtualenvで仮想環境をつくる（省略）&lt;/p&gt;

&lt;p&gt;&lt;code&gt;pip install {package-name}&lt;/code&gt;
pipで必要なパッケージをインストールする&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Flask&lt;/li&gt;
&lt;li&gt;gunicorn: httpサーバー。必須&lt;/li&gt;
&lt;li&gt;postgresql: データベース&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;pip: pythonのパッケージを管理する&lt;/p&gt;

&lt;p&gt;&lt;code&gt;heroku login&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;ログインする&lt;/p&gt;

&lt;h3 id=&#34;3-requirements-txtを用意:cb0cc48d0a7f78f425de2c2eae671543&#34;&gt;3. requirements.txtを用意&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;pip freeze &amp;gt; requirements.txt&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&#34;4-procfileを用意:cb0cc48d0a7f78f425de2c2eae671543&#34;&gt;4. Procfileを用意&lt;/h3&gt;

&lt;p&gt;Procfile: herokuの設定用のテキストファイル&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-Procfile&#34;&gt;web: gunicorn {main-file-name}:app --log-file -
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;5-git-用意:cb0cc48d0a7f78f425de2c2eae671543&#34;&gt;5. git 用意&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;git init&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git add {file-name.py}&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git commit -m “{commit message}&amp;quot;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;heroku create&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt; git push heroku master&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&#34;scale:cb0cc48d0a7f78f425de2c2eae671543&#34;&gt;scale&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;heroku sacale web=1&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;heroku ps&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;確認。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;heroku open&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;ブラウザで開く。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Hugoを使う</title>
      <link>http://nakaokat.github.io/post/hot_to_use_hugo/</link>
      <pubDate>Tue, 23 Jun 2015 18:03:09 +0900</pubDate>
      
      <guid>http://nakaokat.github.io/post/hot_to_use_hugo/</guid>
      <description>

&lt;h3 id=&#34;1-new-post:4f2dfb967fc2e23275831000eeb4843c&#34;&gt;1. new post&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;hugo new {new-post}&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;hugo new post/{new-post}&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&#34;2-build:4f2dfb967fc2e23275831000eeb4843c&#34;&gt;2. Build&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;hugo server --watch --buildDrafts --theme={theme-name}&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;ビルドする。&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>